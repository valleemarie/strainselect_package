library(dendextend)
library(UpSetR)
library(nomclust)
library(factoextra)
library(tidyr)
library(testthat)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
setwd("~/Strain_select/strainselect")
library(cluster)
library(fpc)
library(ggplot2)
library(dplyr)
library(dendextend)
library(UpSetR)
library(nomclust)
library(factoextra)
library(tidyr)
library(testthat)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
#' prepare_input
#'
#' @param data a dataframe
#' @param col_select a vector
#' @param id a number
#' @param date a number
#' @param m a boolean
#' @param a a boolean
#'
#' @return a dataframe
#' @export
#' @examples
prepare_input <- function (data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE) {
duplicate <- which(duplicated(data[,id]))
if (length(duplicate)!=0) {
stop ( "duplicate ID : " , paste(data[duplicate,id], collapse = ", "))
} else {
print("no duplicate ID")
}
rownames(data) <- data[,id]
col_select<-col_select[! col_select %in% date]
clean_data <- data[,col_select]
if (date!=0){
if(a){
clean_data$ANNEE <- substr(data[,date],7,10)
}
if(m){
clean_data$MOIS <- substr(data[,date],4,5)
}
}
clean_data[is.na(clean_data)] <- "unknown"
clean_data[] <- lapply(clean_data, factor)
print(colnames(clean_data))
str(clean_data)
clean_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
data_test <- matrix("test",nrow = 3,ncol = 5)
as.data.frame(data_test)
test_that("prepare_input works properly and show error if needed", {
expect_error(prepare_input(data_test))
})
#' assess_gower
#'
#' @param clean_data a dataframe
#' @param weights a vector
#' @param graph a boolean
#'
#' @return a list containing the components clean_data, gower_dist, aggl.clust.c
#' @export
#' @importFrom cluster daisy
#'
#' @examples
assess_gower <- function(clean_data, weights = rep.int(1, p), graph = TRUE){
p=length(clean_data)
gower_dist <- daisy(clean_data, metric = "gower", weights = weights)
aggl.clust.c <- hclust(gower_dist, method = "complete")
if (graph) {
plot(aggl.clust.c,main = "Agglomerative, complete linkages")
}
return(list(gower_dist=gower_dist, aggl.clust.c=aggl.clust.c))
}
#' assess_gower
#'
#' @param clean_data a dataframe
#' @param weights a vector
#' @param graph a boolean
#'
#' @return a list containing the components clean_data, gower_dist, aggl.clust.c
#' @export
#' @importFrom cluster daisy
#'
#' @examples
assess_gower <- function(clean_data, weights = rep.int(1, p), graph = TRUE){
p=length(clean_data)
gower_dist <- daisy(clean_data, metric = "gower", weights = weights)
aggl.clust.c <- hclust(gower_dist, method = "complete")
if (graph) {
plot(aggl.clust.c,main = "Agglomerative, complete linkages")
}
return(list(gower_dist=gower_dist, aggl.clust.c=aggl.clust.c))
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
# Apply my function
assess_gower(prepared_data, graph = T)
#' cstats_table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#' @param graph_silhouette a boolean
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats.table <- function(dist, tree, k,l, graph_silhouette =T) {
n=k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol =n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
data_fig <- data.frame(t(output))
if (graph_silhouette){
ggplot(data = data_fig,
aes(x=cluster.number, y=avg.silwidth)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative clustering") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
}
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(prepared_data, graph = T)
# Apply my function
cstats_table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
#' cstats_table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#' @param graph_silhouette a boolean
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats_table <- function(dist, tree, k,l, graph_silhouette =T) {
n=k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol =n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
data_fig <- data.frame(t(output))
if (graph_silhouette){
ggplot(data = data_fig,
aes(x=cluster.number, y=avg.silwidth)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative clustering") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
}
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(prepared_data, graph = T)
# Apply my function
cstats_table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
#' select_silhouette
#'
#' @param prepared_data a data frame
#' @param dist a distance object
#' @param k a integer
#' @param isdiss logical value specifying wether x is a dissimilarity matrix
#' @param hc_func the hierarchical clustering function to be used
#' @param hc_method he agglomeration method to be used
#'
#' @return a data frame
#' @export
#'
#' @examples
select_silhouette <- function (prepared_data, dist, k, isdiss = inherits(gower$gower_dist, "dist"),
hc_func = "hclust", hc_method = "complete") {
clust2 <- hcut(dist, k, isdiss,hc_func, hc_method)
silh <- fviz_silhouette(clust2)
selected_data <- prepared_data
selected_data$cluster <- clust2$cluster
n=nrow(selected_data)
selection <- rep(NA,k)
for(i in 1:k){
max_silh_i <- silh$data[which(silh$data$sil_width==max(silh$data$sil_width[silh$data$cluster==i])&silh$data$cluster==i),]
if (nrow(max_silh_i)==1){
selection[i] <- as.character(max_silh_i$name)
} else {
selection[i] <- as.character(sample(max_silh_i$name,1))
}
}
for (i in 1:n){
for (j in 1:k){
if (selected_data$cluster[i]==j){
selected_data$size[i] <- clust2$size[j]
selected_data$selected[i] <- selection[j]
}
}
}
selected_data
}
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(prepared_data, graph = T)
select_silhouette(gower$gower_dist, k=50, isdiss = inherits(gower$gower_dist, "dist"),hc_func = "hclust", hc_method = "complete")
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(prepared_data, graph = T)
select_silhouette(dist=gower$gower_dist, k=50, isdiss = inherits(gower$gower_dist, "dist"),hc_func = "hclust", hc_method = "complete")
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(prepared_data, graph = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
select_silhouette(dist=gower$gower_dist,prepared_data = prepared_data, k=50, isdiss = inherits(gower$gower_dist, "dist"),hc_func = "hclust", hc_method = "complete")
#' prepare_upset
#'
#' @param prepared_data a dataframe
#'
#' @return a dataframe
#' @export
#'
#' @examples
prepare_upset<- function(prepared_data){
upset_data <- data.frame(row.names = rownames(prepared_data))
metadata <- colnames(prepared_data)
for (i in 1:ncol(prepared_data)){
vect <- unique(prepared_data[,i])
tab <- matrix(0,nrow(prepared_data),length(vect))
col.names <- NULL
for (j in 1:length(vect)){
col.names <- c(col.names,paste(metadata[i],"_",vect[j]))
for (k in 1:nrow(prepared_data)){
if (is.na(prepared_data[k,i])==F){
if(prepared_data[k,i]==vect[j]){
tab[k,j] <- 1
}
}
}
}
colnames(tab) <- col.names
upset_data <- cbind(upset_data,tab)
}
upset_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
# Apply my function
prepare_upset(prepared_data)
#' define_profiles
#'
#' @param data a data frame
#' @param sep  Separator to use between values
#'
#' @return a data frame
#' @export
#'
#' @examples
define_profiles <- function (data, sep = ""){
profiles <- unite(data,profiles,c(1:ncol(upset_data)), sep = sep)
profiles_freq <- as.data.frame(table(profiles))
profiles_freq$group <- c(1:nrow(profiles_freq))
n=nrow(profiles)
for (i in 1:n){
for (j in 1:nrow(profiles_freq)){
if (profiles$profiles[i]==profiles_freq$profiles[j]){
profiles$group[i]<-profiles_freq$group[j]
}
}
}
profiles$names<-rownames(profiles)
profiles
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
upset_data <- prepare_upset(prepared_data)
# Apply my function
define_profiles(upset_data)
#' select_profiles
#'
#' @param profiles a data frame
#' @param prepared_data a data frame
#'
#' @return a data frame
#' @export
#'
#' @examples
select_profiles <- function(profiles, prepared_data){
selected_data <- prepared_data
selected_data$group <- profiles$group
selected_data$size <- profiles$freq
k<- max(profiles$group)
n=nrow(selected_data)
selection <-rep(NA,k)
for (j in 1:k){
selection[j] <-sample(profiles$names[profiles$group==j],1)
}
for (i in 1:n){
for (j in 1:k){
if (selected_data$group[i]==j){
selected_data$selected[i] <- selection[j]
}
}
}
selected_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
upset_data <- prepare_upset(prepared_data)
upset_profiles <- define_profiles(upset_data)
# Apply my function
select_profiles(upset_profiles,prepared_data)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
rm(list = c("assess_gower", "cstats_table", "define_profiles", "prepare_input", "prepare_upset", "select_profiles", "select_silhouette"))
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
prepared_data <- strainselect::prepare_input(raw_data,col_select=c(7,10,13,14,17,24),id=1, date=17, m=F, a=T)
prepared_data
upset_data <- strainselect::prepare_upset(prepared_data,nset=70,order.by="freq",mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset(prepared_data)
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset
upset_data
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset
upset_data
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset
upset_data
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset
upset_data
library(UpSetR)
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_data <- strainselect::prepare_upset(prepared_data)
upset_data
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
install.packages("~/Strain_select/strainselect/NAMESPACE", repos = NULL)
library(cluster)
library(fpc)
library(ggplot2)
library(dplyr)
library(dendextend)
library(UpSetR)
library(nomclust)
library(factoextra)
library(tidyr)
library(testthat)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
# Describe your package
fusen::fill_description(
pkg = here::here(),
overwrite = TRUE,
fields = list(
Title = "Strain selection",
Description = "selection of strains using a clustering method",
`Authors@R` = c(
person("Marie", "Vallée", email = "marie.vallee@anses.fr", role = "aut", comment = c(ORCID = "0000-0002-4233-8400")),
person("Laurent", "Guillier", email = "laurent.guillier@anses.fr", role = "cre", comment = c(ORCID = "0000-0002-7867-2937"))
)
)
)
# Define License with use_*_license()
usethis::use_mit_license("Marie Vallée")
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
# Run all this chunk in the console directly
# There already is a dataset in the "inst/" directory
# Make the dataset file available to the current Rmd during development
pkgload::load_all(path = here::here(), export_all = FALSE)
# You will be able to read your example data file in each of your function examples and tests as follows - see chunks below
datafile <- system.file("data_test.csv", package = "strainselect")
row_data <- read.csv(datafile, sep = ";",header = T)
row_data
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
# Pipe
usethis::use_pipe()
# package-level documentation
usethis::use_package_doc()
# GitHub
# Add your credentials for GitHub
gitcreds::gitcreds_set()
install.packages("~/Strain_select/strainselect/NAMESPACE", repos = NULL)
# Simulate package installation
pkgload::load_all()
# Generate documentation and deal with dependencies
attachment::att_amend_desc()
# Check the package
devtools::check()
library(strainselect)
knitr::opts_chunk$set(echo = TRUE)
library(UpSetR)
library(strainselect)
raw_data <- read.csv("data_ex_300.csv",sep=";")
raw_data
raw_data <- read.csv("data_ex_300.csv",sep=";")
raw_data
prepared_data <- strainselect::prepare_input(raw_data,col_select=c(7,10,13,14,17,24),id=1, date=17, m=F, a=T)
prepared_data
upset_data <- strainselect::prepare_upset(prepared_data)
upset_data
upset(upset_data,nset = 70, order.by = "freq", mb.ratio = c(0.30,0.70),set_size.show = T, nintersects = NA)
upset_profiles <- define_profiles(upset_data)
upset_profiles
strain_select_profiles <- select_profiles(upset_profiles, prepared_data)
strain_select_profiles
?select_profiles
remotes::install_local()
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")

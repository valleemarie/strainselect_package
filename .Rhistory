#' @param graph a boolean
#'
#' @return a list
#' @export
#'
#' @examples
assess_gower <- function(data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE, weights = rep.int(1, p), graph = TRUE){
clean_data <- prepare_input(data,col_select=col_select, id =id, date=date,
m=m, a=a)
p=length(clean_data)
gower_dist <- daisy(clean_data, metric = "gower", weights = weights)
aggl.clust.c <- hclust(gower_dist, method = "complete")
if (graph) {
plot(aggl.clust.c,main = "Agglomerative, complete linkages")
}
return(list(clean_data=clean_data,gower_dist=gower_dist, aggl.clust.c=aggl.clust.c))
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
assess_gower(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE, graph = T)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
pkgbuild::find_rtools(debug = TRUE)
pkgbuild::has_rtools
pkgbuild::has_rtools(debug = T)
library(cluster)
library(fpc)
library(ggplot2)
library(dplyr)
library(dendextend)
library(UpSetR)
library(nomclust)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
# Run all this chunk in the console directly
# There already is a dataset in the "inst/" directory
# Make the dataset file available to the current Rmd during development
pkgload::load_all(path = here::here(), export_all = FALSE)
# You will be able to read your example data file in each of your function examples and tests as follows - see chunks below
datafile <- system.file("data_test.csv", package = "strainselect")
row_data <- read.csv(datafile, sep = ";",header = T)
row_data
#' prepare_input
#'
#' @param data a dataframe
#' @param col_select a vector
#' @param id a number
#' @param date a number
#' @param m a boolean
#' @param a a boolean
#'
#' @return a dataframe
#' @export
#' @examples
prepare_input <- function (data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE) {
duplicate <- which(duplicated(data[,id]))
if (length(duplicate)!=0) {
stop ( "duplicate ID : " , paste(data[duplicate,id], collapse = ", "))
} else {
print("no duplicate ID")
}
rownames(data) <- data[,id]
col_select<-col_select[! col_select %in% date]
clean_data <- data[,col_select]
if (date!=0){
if(a){
clean_data$ANNEE <- substr(data[,date],7,10)
}
if(m){
clean_data$MOIS <- substr(data[,date],4,5)
}
}
clean_data[is.na(clean_data)] <- "unknown"
clean_data[] <- lapply(clean_data, factor)
print(colnames(clean_data))
str(clean_data)
clean_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
# test_that("my_median works properly and show error if needed", {
#   expect_true(my_median(1:12) == 6.5)
#   expect_error(my_median("text"))
# })
#
# # Test with your dataset in "inst/"
# datafile <- system.file("nyc_squirrels_sample.csv", package = "strainselect")
# nyc_squirrels <- read.csv(datafile, encoding = "UTF-8")
# # Apply test on my function
# test_that("my_median works properly with internal dataset", {
#   expect_equal(my_median(nyc_squirrels[,"hectare_squirrel_number"]), 3)
# })
#' assess_gower
#'
#' @param data a dataframe
#' @param col_select a vector
#' @param id a number
#' @param date a number
#' @param m a boolean
#' @param a a boolean
#' @param weights a vector
#' @param graph a boolean
#'
#' @return a list containing the components clean_data, gower_dist, aggl.clust.c
#' @export
#'
#' @examples
assess_gower <- function(data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE, weights = rep.int(1, p), graph = TRUE){
clean_data <- prepare_input(data,col_select=col_select, id =id, date=date,
m=m, a=a)
p=length(clean_data)
gower_dist <- daisy(clean_data, metric = "gower", weights = weights)
aggl.clust.c <- hclust(gower_dist, method = "complete")
if (graph) {
plot(aggl.clust.c,main = "Agglomerative, complete linkages")
}
return(list(clean_data=clean_data,gower_dist=gower_dist, aggl.clust.c=aggl.clust.c))
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
assess_gower(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE, graph = T)
#' cstats.table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats.table <- function(dist, tree, k,l) {
n=k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol =n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
output
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(raw_data)
# Apply my function
cstats.table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
#' prepare_upset
#'
#' @param prepared_data a dataframe
#'
#' @return a dataframe
#' @export
#'
#' @examples
prepare_upset<- function(prepared_data){
upset_data <- data.frame(row.names = rownames(prepared_data))
metadata <- colnames(prepared_data)
for (i in 1:ncol(prepared_data)){
vect <- unique(prepared_data[,i])
tab <- matrix(0,nrow(prepared_data),length(vect))
col.names <- NULL
for (j in 1:length(vect)){
col.names <- c(col.names,paste(metadata[i],"_",vect[j]))
for (k in 1:nrow(prepared_data)){
if (is.na(prepared_data[k,i])==F){
if(prepared_data[k,i]==vect[j]){
tab[k,j] <- 1
}
}
}
}
colnames(tab) <- col.names
upset_data <- cbind(upset_data,tab)
}
upset_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
# Apply my function
prepare_upset(prepared_data)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
#' cstats.table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats.table <- function(dist, tree, k,l) {
n = k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol = n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
output
}
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
#' cstats_table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats_table <- function(dist, tree, k,l) {
n = k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol = n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
output
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(raw_data)
# Apply my function
cstats_table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(raw_data)
# Apply my function
cstats_table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
library(cluster)
library(fpc)
library(ggplot2)
library(dplyr)
library(dendextend)
library(UpSetR)
library(nomclust)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
# Run all this chunk in the console directly
# There already is a dataset in the "inst/" directory
# Make the dataset file available to the current Rmd during development
pkgload::load_all(path = here::here(), export_all = FALSE)
# You will be able to read your example data file in each of your function examples and tests as follows - see chunks below
datafile <- system.file("data_test.csv", package = "strainselect")
row_data <- read.csv(datafile, sep = ";",header = T)
row_data
#' prepare_input
#'
#' @param data a dataframe
#' @param col_select a vector
#' @param id a number
#' @param date a number
#' @param m a boolean
#' @param a a boolean
#'
#' @return a dataframe
#' @export
#' @examples
prepare_input <- function (data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE) {
duplicate <- which(duplicated(data[,id]))
if (length(duplicate)!=0) {
stop ( "duplicate ID : " , paste(data[duplicate,id], collapse = ", "))
} else {
print("no duplicate ID")
}
rownames(data) <- data[,id]
col_select<-col_select[! col_select %in% date]
clean_data <- data[,col_select]
if (date!=0){
if(a){
clean_data$ANNEE <- substr(data[,date],7,10)
}
if(m){
clean_data$MOIS <- substr(data[,date],4,5)
}
}
clean_data[is.na(clean_data)] <- "unknown"
clean_data[] <- lapply(clean_data, factor)
print(colnames(clean_data))
str(clean_data)
clean_data
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
#' assess_gower
#'
#' @param data a dataframe
#' @param col_select a vector
#' @param id a number
#' @param date a number
#' @param m a boolean
#' @param a a boolean
#' @param weights a vector
#' @param graph a boolean
#'
#' @return a list containing the components clean_data, gower_dist, aggl.clust.c
#' @export
#'
#' @examples
assess_gower <- function(data, col_select=c(1:length(data)), id =1, date=0,
m=FALSE, a=TRUE, weights = rep.int(1, p), graph = TRUE){
clean_data <- prepare_input(data,col_select=col_select, id =id, date=date,
m=m, a=a)
p=length(clean_data)
gower_dist <- daisy(clean_data, metric = "gower", weights = weights)
aggl.clust.c <- hclust(gower_dist, method = "complete")
if (graph) {
plot(aggl.clust.c,main = "Agglomerative, complete linkages")
}
return(list(clean_data=clean_data,gower_dist=gower_dist, aggl.clust.c=aggl.clust.c))
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
# Apply my function
assess_gower(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE, graph = T)
#' cstats_table
#'
#' @param dist a distance object
#' @param tree a dendrogram object
#' @param k a number
#' @param l a number
#'
#' @return a dataframe
#' @export
#'
#' @examples
cstats_table <- function(dist, tree, k,l) {
n = k/l
clust.assess <- c("cluster.number","n","within.cluster.ss","average.within","average.between",
"wb.ratio","dunn2","avg.silwidth")
clust.size <- c("cluster.size")
stats.names <- c()
row.clust <- c()
output.stats <- matrix(ncol = n, nrow = length(clust.assess))
cluster.sizes <- matrix(ncol = n, nrow = n)
for(i in 1:n){
row.clust[i] <- paste("Cluster-", i*l, " size")
}
for(i in 1:n){
print(i*l)
stats.names[i] <- paste("Test", i*l-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.assess])[j]
}
for(d in 1:n) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i*l))[clust.size])[d*l]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)
colnames(output) <- stats.names[1:n]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
output
}
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
gower <- assess_gower(raw_data)
# Apply my function
cstats_table(dist = gower$gower_dist, tree = gower$aggl.clust.c, k = 50,l = 10)
# Example with your dataset in "inst/"
datafile <- system.file("data_test.csv", package = "strainselect")
raw_data <- read.csv(datafile, sep = ";",header = T)
prepared_data <- prepare_input(raw_data,col_select = c(7,10,13,14,17,24),
id=1,date=17,m=FALSE,a=TRUE)
# Apply my function
prepare_upset(prepared_data)
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
rm(list = c("assess_gower", "cstats_table", "prepare_input"))
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
.Last.error
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
# Keep eval=FALSE to avoid infinite loop in case you hit the knit button
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_full.Rmd", vignette_name = "Get started")
.Last.error
library(strainselect)
